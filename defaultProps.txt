Tooltip component
A tooltip is a feature for giving 
users some extra feedback. 
When a user hovers their cursor over an 
element, a message appears 
next to the element with more information.

Make a file called Tooltip.js in the 
./src/composition directory that will 
export a Tooltip component. Inside the 
Tooltip.js file, let's start with the component. 
Tooltips need to be inline so that they can 
be used within paragraph text, so a span element 
works. Also, add a className so that we can style 
the Tooltip:

import React from 'react';

function Tooltip(props) {
  return (
    <span className='Tooltip'>
    </span>
  )
}

export default Tooltip;

We'll need two sections inside the Tooltip, 
one for the text to display and the second for 
the message that appears on a hover. We'll use 
the children prop for the normal text and a prop 
called message for the text that will appear.

function Tooltip(props) {
  return (
    <span className='Tooltip'>
      <span className='Tooltip-content'>
        {props.children}
      </span>
      <div className='Tooltip-message'>
        {props.message}
      </div>
    </span>
  )
}
We've also added a className on each of the 
nested spans to implement tooltip-like behavior.

inCSS fileFirst, we'll want the outer span to show a "pointer" cursor when a user hovers over it and we'll want relative positioning so we can anchor the message against it. Let's add some styles to Tooltip.css.

.Tooltip {
  position: relative;
  cursor: pointer;
}

.Tooltip-content {
  color: #01A800;
}
Next, we can style the message with white text on a dark background and get it to appear above the text.

.Tooltip-message {
  background-color: hsla(0, 0%, 10%, 0.9);
  border-radius: 3px;
  color: #fff;
  left: 4vw;
  margin-bottom: 5px;
  margin-left: -8vw;
  min-width: 160px;
  padding: 7px 10px;
  position: absolute;
  text-align: center;
  top: calc(-1.2em - 14px);
  white-space: nowrap;
}

We want the tooltip to look a bit like a speech bubble as well so we can add some styles to make a little triangle underneath the message box.

/* triangle */
.Tooltip-message:after {
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 5px solid hsla(0, 0%, 20%, 0.9);
  content: " ";
  font-size: 0;
  left: 6vw;
  line-height: 0;
  margin-left: -5px;
  position: absolute;
  top: calc(18px + 14px);
  width: 0;
}

Don't forget to import CSS into the JS file
We imported the Tooltip into app.js and called 
it in the Split component instance

/* start hidden */
.Tooltip-message {
  opacity: 0;
  pointer-events: none;
  visibility: hidden;
}
/* show on hover */
.Tooltip:hover > .Tooltip-message {
  opacity: 1;
  visibility: visible;
}

Change the span.Tooltip-content inside the 
Tooltip component like so:

-<span className='Tooltip-content'>
+<span
+  className='Tooltip-content'
+  style={{ color: props.color }}
+>
  {props.children}
</span>

Normally we would prefer to use a className and 
CSS to control the style, but here we've used 
inline styles. This is because we don't want to 
write a CSS rule for every possible color someone 
could use; inline styles give more control to the 
parent component.

Now we can update the instances of Tooltip that 
we created in the App component. Let's add new 
colors to them.

// before
const firstTooltip = (
  <Tooltip message='tooltip message'>
   ipsum
  </Tooltip>
)
const secondTooltip = (
  <Tooltip message='another tooltip message'>
    officiis
  </Tooltip>
)
// after
const firstTooltip = (
  <Tooltip color='hotpink' message='tooltip message'>
   ipsum
  </Tooltip>
)
const secondTooltip = (
  <Tooltip color='#126BCC' message='another tooltip message'>
    officiis
  </Tooltip>
)

We can use defaultProps to move the default color 
out of the CSS.

First, let's remove the following line from the 
Tooltip.css that makes the Tooltip green by 
default.

To use defaultProps, we'll take the opportunity 
to introduce React class components.

Note: it is possible to use default props with 
function components as well. But classes are 
important in React and default props give us a 
gentle opportunity to write one.

Classes
Classes are a feature of standard ES6 JavaScript 
that we can use to make a 
React component with extra features.

To create a class component, we start with the 
outer definition. Let's make a class component 
with the name TooltipClass.

Let's make a class version of the Tooltip 
component that sits side by side with the Tooltip 
function component so you can compare the two.

function Tooltip(props) {/* content not shown */}

class TooltipClass extends React.Component {}

// we're not exporting TooltipClass yet...
export default Tooltip;

Classes are similar to objects in that they can 
contain methods. In React class components, 
we need to make a method called render. 
Render is the only method required for React 
class components.

class TooltipClass extends React.Component {
  render() {
    return <span />
  }
}
The render method is similar to the 
function components we've been building. 
You return JSX to define what the component 
will look like.

One difference between render() and a function 
Component() is how props work. In a function 
component, props are a parameter, as we've seen. 
In a class, however, props aren't a parameter 
anymore, we need to access props using this.props.

The following are equivalent:

// props are a parameter
function FunctionComponent(props) {
  return <span>{props.children}</span>
}

// props accessed by `this.props`
class ClassComponent extends React.Component {
  render() {
    return <span>{this.props.children}</span>
  }
}

class TooltipClass extends React.Component {
  render() {
    console.log('Using a class component!')
    console.log(this.props)
    return (
      <span className='Tooltip'>
        <span
          className='Tooltip-content'
          style={{ color: this.props.color }}
        >
          {this.props.children}
        </span>
        <div className='Tooltip-message'>
          {this.props.message}
        </div>
      </span>
    )
  }
}

Right now, we have 2 versions of the 
tooltip component that are both functionally 
the same, Tooltip and TooltipClass. 

class TooltipClass extends React.Component {
  static defaultProps = {
    color: '#01A800', // green
  };
  render() {
    /* content not shown */
  }
}
 The rule for making default props is to 
create a defaultProps property for the class with 
static defaultProps and then assign an object to 
that property. The keys of that object are the 
props you want to have defaults for and the 
values are the default values you want to assign.

The defaultProp will be used if no equivalent 
prop is supplied. In this case, it will make 
the props.color have a default value of #01A800 
when no other value is supplied.