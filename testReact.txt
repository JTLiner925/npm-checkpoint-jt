Testing individual components is called unit testing, 
testing how components behave when working with other 
components is called integration testing, and testing 
how the entire application behaves along with 
the people using it and the hardware is called systems testing. 

The degree to which your code is protected by tests in this way 
is called test coverage. Most software teams aim for a very high 
level of test coverage.

Jest is a JavaScript testing platform built by Facebook

Write a function leapYear(year) that returns true if the year is a leap year, false otherwise. The rules for leap years are:

only applies to years since 1582, throw an error for anything else
if a year is divisible by 4 then it is a leap year
except years divisible by 100, those are not leap years
except years divisible by 400, those are leap years
Write tests for the various requirements.
1	1568	throw error	Only work for years >= 1582
2	1900	false	divisible by 100, not 400, not a leap year
3	2000	true	divisible by 400, leap year
4	1984	true	divisible by 4, not 100, leap year
5	1983	false	Not divisible by 4, not a leap year

function  leapYear(year) {
  if(year < 1582) {
    throw new Error('Leap year rules do not work before 1582');
  }
  const div400 = year % 400 === 0;
  const div100 = year % 100 === 0;
  const div4 = year % 4 === 0;
  return div400 || (div4 || !div100);
}

// The next line makes the function available to other JavaScript modules
// This is necessary for the test code to be able to run this function
export default leapYear;

in test file
import leapYear  from './index';

it('should NOT be a leap year if divisible by 100, not 400', () => {
  const input = 1900;
  const expectedOutput = false; 
  expect(leapYear(input)).toBe(expectedOutput);
});
The it function is invoked by Jest, it takes two parameters,
a String describing the test and the test function itself. 

Jest Matchers Link
https://jestjs.io/docs/en/using-matchers

$ npm test

.toThrow Jest
https://jestjs.io/docs/en/expect#tothrowerror